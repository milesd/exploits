#!/usr/bin/python
#
# brazlib-exercizer -- For a trojan ssh daemon or client, which is storing
# its logs in a simple rotation cipher.
#
# miles@cs.stanford.edu
#

import pexpect
import sys
import time
import os
import md5
from subprocess import *
#import md5crypt

TimeStamp = time.strftime("%m%d%y_%I%M%S%p", time.localtime())

# Generate passwords composed of the ascii table in ascending order, grouped
# into n-char strings, e.g.  (n=4): ... abcd, efgh, ijkl, ...

ssh_trojan = "/root/ssh-trojan"
ssh_user = "lame"
ssh_host = "poobah.stanford.edu"
ssh_log = "/usr/share/man/de/zlib.3" # Hard coded in binary

n = 8  # md5 
i = 0
j = 1
k = 1
password = ""
salt = ""

def ssh_with_password(password):
    print "\tsetting local password..."

    foo = pexpect.spawn('/usr/sbin/chpasswd %s' % (ssh_user))
    foo.sendline('%s:%s' % (ssh_user, password))
    foo.close()

    foo = pexpect.spawn('%s %s@%s' % (ssh_trojan, ssh_user, ssh_host))
    print "\ttrying ssh..."
    foo.expect('.*ssword:')
    foo.sendline(password)
    time.sleep(0.1)
    foo.send('\r')
    foo.close()

    print Popen(["ls", "-la", ssh_log], stdout=PIPE).communicate()[0]



os.system('/bin/rm -f /usr/share/man/de/zlib.3')

try: 
    # Go through the entire ascii table sequentially...
    for i in range(32, 255):

	if i == 127 or i == 255:
		password = password + " "
	else:
		password = password + chr(i)

	k = i + 1
        if ( i + 1 ) %  n == 0:
            #print "k %d, start=%d end=%d md5=%s:%s" % (k, i-n, i, salt, md5.new(salt + password).hexdigest())
            print "passwd %d = %s, start=%d end=%d " % (j, password, k-n, i)
            ssh_with_password(password)

            # Start new password
            password = ""
            j += 1


    if password != "":
            i += 1
	    k = i + 1
            #print "k %d, start=%d end=%d md5=%s:%s" % (k, i-n, i, salt, md5.new(salt + password).hexdigest())
            print "passwd %d = %s, start=%d end=%d " % (j, password, k-n, i)
            ssh_with_password(password)

    exit
except IndexError:
    print "index error %s " % (i) 
    exit


